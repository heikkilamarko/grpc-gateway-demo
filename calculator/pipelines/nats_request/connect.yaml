input:
  nats:
    urls:
      - ${NATS_ADDRESS}
    subject: calculator.v1.*
    auto_replay_nacks: false
    send_ack: false

pipeline:
  processors:
    - try:
        - mapping: meta response_status = 400

        - mapping: |
            meta calculator_operation = @nats_subject.split(".").index(-1)

            root = if !["add","subtract"].contains(@calculator_operation) {
              throw("unsupported operation, supported operations: add, subtract")
            }

        - json_schema:
            schema_path: file:///json_schema.json

        - mapping: meta response_status = 500

        - branch:
            request_map: |
              root.a = this.a
              root.b = this.b
            processors:
              - http:
                  url: ${CALCULATOR_GATEWAY_ADDRESS}/v1/calculator/${!@calculator_operation}
                  verb: POST
                  headers:
                    Api-Key: ${CALCULATOR_GATEWAY_API_KEY}
                    Content-Type: application/json
            result_map: |
              root.result = this.result

        - mapping: meta response_status = 200

    - mapping: |
        if errored() {
          root.error.code = @response_status
          root.error.message = if @response_status == 400 { error() } else { "internal error" }
        } else {
          root.result = this.result
        }
        root.processed_on = hostname()
        root.processed_at = now()
        root.processed_by = "calculator-pipeline-nats-request"

output:
  nats:
    urls:
      - ${NATS_ADDRESS}
    subject: ${!@nats_reply_subject}

http:
  address: ${HTTP_ADDRESS}

logger:
  level: ${LOG_LEVEL:INFO}
  format: logfmt
  static_fields:
    service: calculator-pipeline-nats-request

tracer:
  open_telemetry_collector:
    grpc:
      - address: ${OPEN_TELEMETRY_COLLECTOR_GRPC_ADDRESS}

shutdown_delay: 5s
