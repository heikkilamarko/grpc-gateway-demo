input:
  generate:
    mapping: root = {}
    interval: 0/5 * * * * *

pipeline:
  processors:
    - try:
        - mapping: |
            root = this
            root.a = random_int(timestamp_unix_nano(), 0, 100)
            root.b = random_int(timestamp_unix_nano(), 0, 100)

        - branch:
            request_map: |
              root.a = this.a
              root.b = this.b
            processors:
              - http:
                  url: ${CALCULATOR_SERVICE_ADDRESS}/v1/calculator/add
                  verb: POST
                  headers:
                    Content-Type: application/json
            result_map: |
              root.result = this.result

        - branch:
            request_map: root = this
            processors:
              - http:
                  url: ${HTTPBIN_ADDRESS}/unstable
                  verb: POST
                  headers:
                    Content-Type: application/json
                  retries: 1

    - mapping: |
        if errored() {
          root.error.code = 500
          root.error.message = error()
        } else {
          root.result = this.result
        }
        root.processed_on = hostname()
        root.processed_at = now()
        root.processed_by = "calculator-pipeline-cron-request"

output:
  switch:
    cases:
      - check: errored()
        output:
          sql_raw:
            driver: postgres
            dsn: ${POSTGRES_CONNECTIONSTRING}
            query: INSERT INTO demo.error_requests (error_message, data) VALUES ($1, $2);
            args_mapping: root = [error(), content()]

      - output:
          sql_raw:
            driver: postgres
            dsn: ${POSTGRES_CONNECTIONSTRING}
            query: INSERT INTO demo.success_requests (data) VALUES ($1);
            args_mapping: root = [content()]

http:
  address: ${HTTP_ADDRESS}

logger:
  level: ${LOG_LEVEL:INFO}
  format: logfmt
  static_fields:
    service: calculator-pipeline-cron-request

shutdown_delay: 5s
