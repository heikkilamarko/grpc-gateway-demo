input:
  http_server:
    path: /v1/calculator
    timeout: 10s
    sync_response:
      status: ${!meta("response_status")}
      headers:
        Content-Type: application/json

pipeline:
  processors:
    - try:
        - mapping: meta response_status = 400

        - json_schema:
            schema_path: file:///json_schema.json

        - mapping: meta response_status = 500

        - branch:
            request_map: |
              root.a = this.a
              root.b = this.b
            processors:
              - http:
                  url: ${CALCULATOR_GATEWAY_ADDRESS}/v1/calculator/add
                  verb: POST
                  headers:
                    Api-Key: ${CALCULATOR_GATEWAY_API_KEY}
                    Content-Type: application/json
            result_map: |
              root.results.add = this.result

        - branch:
            request_map: |
              root.a = this.a
              root.b = this.b
            processors:
              - http:
                  url: ${CALCULATOR_GATEWAY_ADDRESS}/v1/calculator/subtract
                  verb: POST
                  headers:
                    Api-Key: ${CALCULATOR_GATEWAY_API_KEY}
                    Content-Type: application/json
            result_map: |
              root.results.subtract = this.result

        - mapping: meta response_status = 200

    - mapping: |
        if errored() {
          root.error.code = @response_status
          root.error.message = if @response_status == 400 { error() } else { "internal error" }
        } else {
          root.results = this.results
        }
        root.processed_on = hostname()
        root.processed_at = now()
        root.processed_by = "calculator-pipeline-http-request"

output:
  sync_response: {}

http:
  address: ${HTTP_ADDRESS}

logger:
  level: ${LOG_LEVEL:INFO}
  format: logfmt
  static_fields:
    service: calculator-pipeline-http-request

tracer:
  open_telemetry_collector:
    grpc:
      - address: ${OPEN_TELEMETRY_COLLECTOR_GRPC_ADDRESS}

shutdown_delay: 5s
